"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const definitions_1 = require("../definitions");
const add_1 = require("../android/add");
const add_2 = require("../ios/add");
const common_1 = require("../android/common");
const copy_1 = require("./copy");
const common_2 = require("../android/common");
const common_3 = require("../ios/common");
const sync_1 = require("./sync");
const common_4 = require("../common");
const fs_1 = require("../util/fs");
const emoji_1 = require("../util/emoji");
const inquirer = require("inquirer");
const chalk_1 = require("chalk");
async function createCommand(config, dir, name, id) {
    try {
        // Get app name
        const appName = await common_4.getName(config, name);
        // Get app identifier
        const appId = await common_4.getAppId(config, id);
        // Prompt for app name if not provided
        const appDir = await getDir(config, dir);
        await common_4.check(config, [
            (config) => common_4.checkAppDir(config, dir),
            (config) => common_4.checkAppId(config, appId),
            (config) => common_4.checkAppName(config, appName)
        ]);
        const cliVersion = require('../../package.json').version;
        common_4.log(chalk_1.default `\n{bold ${emoji_1.emoji('⚡️', '*')}   Welcome to Capacitor (CLI v${cliVersion}) ${emoji_1.emoji('⚡️', '*')}}\n`);
        // Create the directory
        await makeDirectory(config, appDir);
        // Set current working directory for config
        config.setCurrentWorkingDir(appDir);
        // Set some default settings
        config.app.appName = appName;
        config.app.appId = appId;
        config.app.bundledWebRuntime = true;
        await common_4.getOrCreateConfig(config);
        // Copy the starter project
        await create(config, appDir, appName, appId);
        // npm install
        await installDeps(config, appDir);
        // Add default platforms (ios on mac, android)
        await addPlatforms(config, appDir);
        // Apply project-specific settings to platform projects
        await editPlatforms(config, appName, appId);
        // Clean platforms if needed
        await cleanPlatforms(config);
        // Copy web and capacitor to web assets
        await copy_1.copy(config, config.web.name);
        // Say something nice
        printNextSteps(config, appDir);
    }
    catch (e) {
        // String errors are our check errors (most likely)
        if (typeof e === 'string') {
            common_4.log('Usage: npx @capacitor/cli create appDir appName appId');
            common_4.log('Example: npx @capacitor/cli create my-app "My App" "com.example.myapp"');
        }
        common_4.logFatal(e);
    }
}
exports.createCommand = createCommand;
async function getDir(config, dir) {
    if (!dir) {
        const answers = await inquirer.prompt([{
                type: 'input',
                name: 'dir',
                message: `Directory for new app`,
                validate: function (input) {
                    if (!input || input.trim() === '') {
                        return false;
                    }
                    return true;
                }
            }]);
        return answers.dir;
    }
    return dir;
}
async function makeDirectory(config, dir) {
    if (await fs_1.existsAsync(dir)) {
        common_4.logFatal(`The directory ${chalk_1.default.bold(dir)} already exists. Please remove it before creating your app`);
    }
    await fs_1.mkdirAsync(dir);
}
async function create(config, dir, appName, appId) {
    const templateDir = config.app.assets.templateDir;
    await common_4.runTask(chalk_1.default `Creating app {bold ${appName}} in {bold ${dir}} with id {bold ${appId}}`, () => {
        return fs_1.copyAsync(templateDir, dir);
    });
}
exports.create = create;
async function installDeps(config, dir) {
    await common_4.runTask(chalk_1.default `Installing dependencies`, async () => {
        return common_4.runCommand(`cd "${dir}" && npm install --save @capacitor/cli @capacitor/core`);
    });
}
async function addPlatforms(config, dir) {
    await common_4.runTask(chalk_1.default `{green {bold add}} default platforms`, async () => {
        if (config.cli.os === definitions_1.OS.Mac) {
            await add_2.addIOS(config);
            await sync_1.sync(config, config.ios.name);
        }
        await add_1.addAndroid(config);
        await sync_1.sync(config, config.android.name);
    });
}
async function editPlatforms(config, appName, appId) {
    if (config.cli.os === definitions_1.OS.Mac) {
        await common_3.editProjectSettingsIOS(config);
    }
    await common_2.editProjectSettingsAndroid(config);
}
async function cleanPlatforms(config) {
    await common_1.gradleClean(config);
}
function printNextSteps(config, appDir) {
    common_4.log(chalk_1.default `{green ✔} Your app is ready!`);
    common_4.log(`\nNext steps:`);
    common_4.log(chalk_1.default `cd {bold ./${appDir}}`);
    common_4.log(`Get to work by following the Capacitor Development Workflow: https://capacitor.ionicframework.com/docs/basics/workflow`);
}
